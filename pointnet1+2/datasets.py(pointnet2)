import torch.utils.data as data
import h5py
import torch
import numpy as np
import os
from glob import glob
import json

class ShapeNetDataset(data.Dataset):
    def __init__(self,
                 root,
                 npoints=1024,
                 classification=False,
                 class_choice=None,
                 split='train',
                 data_augmentation=True):
        self.npoints = npoints
        self.root = root  #file path
        self.catfile = os.path.join(self.root, 'synsetoffset2category.txt')
        self.cat = {}
        self.data_augmentation = data_augmentation
        self.classification = classification
        self.seg_classes = {}
        
        with open(self.catfile, 'r') as f:
            for line in f:
                ls = line.strip().split()
                self.cat[ls[0]] = ls[1]
        #print(self.cat)
        if not class_choice is None:
            self.cat = {k: v for k, v in self.cat.items() if k in class_choice}

        self.id2cat = {v: k for k, v in self.cat.items()}

        self.meta = {}
        splitfile = os.path.join(self.root, 'train_test_split', 'shuffled_{}_file_list.json'.format(split))
        #from IPython import embed; embed()
        filelist = json.load(open(splitfile, 'r'))
        for item in self.cat:
            self.meta[item] = []

        for file in filelist:
            _, category, uuid = file.split('/')
            if category in self.cat.values():
                self.meta[self.id2cat[category]].append((os.path.join(self.root, category, 'points', uuid+'.pts'),
                                        os.path.join(self.root, category, 'points_label', uuid+'.seg')))

        self.datapath = []
        for item in self.cat:
            for fn in self.meta[item]:
                self.datapath.append((item, fn[0], fn[1]))

        self.classes = dict(zip(sorted(self.cat), range(len(self.cat))))
        print('classes is',	self.classes)
        #print('cat is',	self.cat)
        #print('meta is',self.meta)
        with open(os.path.join(os.path.dirname(os.path.realpath(__file__)), 'misc/num_seg_classes.txt'), 'r') as f:
            for line in f:
                ls = line.strip().split()
                self.seg_classes[ls[0]] = int(ls[1])
        self.num_seg_classes = self.seg_classes[list(self.cat.keys())[0]]
        
    def __getitem__(self, index):
        fn = self.datapath[index]
        cls = self.classes[self.datapath[index][0]]
        point_set = np.loadtxt(fn[1]).astype(np.float32)
        seg = np.loadtxt(fn[2]).astype(np.int64)
        #print(point_set.shape, seg.shape)

        choice = np.random.choice(len(seg), self.npoints, replace=True)
        #resample
        point_set = point_set[choice, :]

        point_set = point_set - np.expand_dims(np.mean(point_set, axis = 0), 0) # center
        dist = np.max(np.sqrt(np.sum(point_set ** 2, axis = 1)),0)
        point_set = point_set / dist #scale

        if self.data_augmentation:
            theta = np.random.uniform(0,np.pi*2)
            rotation_matrix = np.array([[np.cos(theta), -np.sin(theta)],[np.sin(theta), np.cos(theta)]])
            point_set[:,[0,2]] = point_set[:,[0,2]].dot(rotation_matrix) # random rotation
            point_set += np.random.normal(0, 0.02, size=point_set.shape) # random jitter

        seg = seg[choice]
        point_set = torch.from_numpy(point_set)
        seg = torch.from_numpy(seg)
        cls = torch.from_numpy(np.array([cls]).astype(np.int64))

        if self.classification:
            return point_set, cls
        else:
            return point_set, seg

    def __len__(self):
        return len(self.datapath)
class ModelNetDataset(data.Dataset):
	def __init__(self,split='train'):
		self.cat = []
		self.catfile = 'modelnet40/modelnet40_shape_names.txt'
		with open(self.catfile,'r') as f:
			for line in f:
				self.cat.append(line[:-1])
		self.meta = {}
		for item in self.cat:
			self.meta[item] = []
		self.splitfile = 'modelnet40/modelnet40_' + split + '.txt'
		with open(self.splitfile,'r') as f:
			for file in f:
				category, uuid = file.split('/')

				self.meta[category].append((file,category))
#		print(self.meta)
		self.datapath = []
		for item in self.cat:
			for fn in self.meta[item]:
				self.datapath.append((item, fn[0], fn[1]))
		self.classes = dict(zip(sorted(self.cat), range(len(self.cat))))

	def __getitem__(self, index):
		fn = self.datapath[index]
		cls_ = self.classes[self.datapath[index][0]]
		point_set = np.loadtxt('modelnet40/'+fn[1][:-1]+'.txt',delimiter=',')
		point_set = point_set[:,:3]
		choice = np.random.choice(point_set.shape[0], 5000, replace=True)
		point_set = point_set[choice,:]
		point_set += np.random.normal(0, 0.01, size=point_set.shape)
		point_set = torch.from_numpy(point_set)
		point_set = point_set.float()
		cls_ = torch.from_numpy(np.array([cls_]).astype(np.int64))
		return point_set,cls_
	def __len__(self):
		return len(self.datapath)
#class ModelNetDataset(data.Dataset):
#    def __init__(self, train=True):
#        if train:
#            data_file = 'data/modelnet40_ply_hdf5_2048/train_files.txt'
#        else:
#            data_file = 'data/modelnet40_ply_hdf5_2048/test_files.txt'
#        file_list = [line.rstrip() for line in open(data_file, 'r')]
#        
#        all_data = np.zeros([0, 2048, 3], np.float32)
#        all_label = np.zeros([0, 1], np.int64)
#        for filename in file_list:
#            f = h5py.File(filename)
#            data = f['data'][:]
#            label = f['label'][:]
#
#            all_data = np.concatenate([all_data, data], 0)
#            all_label = np.concatenate([all_label, label], 0)
#
#        self.pointcloud = all_data
#        self.label = all_label
#
#    def __len__(self):
#        return self.label.shape[0]
#
#    def __getitem__(self, index):
#        return self.pointcloud[index], self.label[index]

def pc_normalize(pc):
    centroid = np.mean(pc, axis=0)
    pc = pc - centroid
    m = np.max(np.sqrt(np.sum(pc**2, axis=1)))
    pc = pc / m
    return pc

class TensorBodyDataset():
    def __init__(self, data_dir, normalize=True, train=True):
        self.normalize = normalize
        self.pointcloud_files = []
        self.label_files = []
        file_list = os.path.join(data_dir, 'data_list.txt')
        with open(file_list, 'r') as file:
            for line in file:
                if line:
                    pointcloud_file, label_file = line.rstrip().split(' ')
                    self.pointcloud_files.append(os.path.join(data_dir, pointcloud_file))
                    self.label_files.append(os.path.join(data_dir, label_file))
        if train:
            self.idxs = np.arange(len(self.pointcloud_files))[:30000]
        else:
            self.idxs = np.arange(len(self.pointcloud_files))[30000:]

    def __len__(self):
        return len(self.idxs)

    def __getitem__(self, index):
        pointcloud = np.load(self.pointcloud_files[self.idxs[index]]).astype(np.float32)
        label = np.load(self.label_files[self.idxs[index]]).astype(np.int64)

        if self.normalize:
            pointcloud = pc_normalize(pointcloud)

        return pointcloud, label

class SMPLDataset():
    def __init__(self, data_dir, normalize=True, train=True):
        self.normalize = normalize
        self.pointcloud_files = glob(os.path.join(data_dir, 'pointclouds', '*/*.npy'))
        self.label_files = glob(os.path.join(data_dir, 'labels', '*/*.npy'))
        N = len(self.pointcloud_files)  
        indices = np.random.choice(N, N, replace=False)
        part = int(N * 0.8)
        if train:
            self.idxs = indices[:part]
        else:
            self.idxs = indices[part:]

    def __len__(self):
        return len(self.idxs)

    def __getitem__(self, index):
        pointcloud = np.load(self.pointcloud_files[self.idxs[index]]).astype(np.float32)
        label = np.load(self.label_files[self.idxs[index]]).astype(np.int64)

        if self.normalize:
            pointcloud = pc_normalize(pointcloud)

        return pointcloud, label


if __name__ == '__main__':
    #dataset = ModelNetDataset()
    #dataset = TensorBodyDataset('data/seg1024')
    dataset = SMPLDataset('D:\\Data\\CMUPointclouds')
    print(len(dataset))
